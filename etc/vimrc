set nocompatible
silent! source $HOME/.vim/etc/plugs.vim

set background=dark
colorscheme jellybeans

syntax on

filetype on
filetype indent on
filetype plugin on

set number
set relativenumber

set autoindent
set smartindent
set smarttab
set expandtab

set shiftwidth=2
set softtabstop=2
set tabstop=2

set virtualedit=onemore

set history=1000

set wildignore+=*/tmp/*,*.so,*.gz,*.swp,*.bak,*.pyc,*.class

set listchars=eol:$,tab:>-,trail:~,extends:>,precedes:<

set ignorecase
set smartcase

set autoread

set hlsearch

set cursorline
set nowrap

set t_vb=

if has('persistant_undo')
  set undodir=$HOME/.vim/undo/
  set undofile
  set undolevels=1000
  set undoreload=10000
endif

set directory=$HOME/.vim/swap

set backup
set writebackup
set backupdir-=.
set backupdir=$HOME/.vim/backup/

set viminfo+=n$HOME/.vim/.viminfo

set spellfile=$HOME/.vim-spell-en.utf-8.add

set wildmode=longest,list:longest

set tags+=./.git/tags

augroup file_specific_settings
  autocmd!
  autocmd FileType markdown setlocal spell
  autocmd FileType gitcommit setlocal spell
augroup END

autocmd FileType * setlocal formatoptions-=cro
set formatoptions-=cro

set timeoutlen=1000
set ttimeoutlen=0
set pastetoggle=<F7>

nnoremap <space> :
let mapleader=','
nnoremap <silent> \ ,

nnoremap Y y$

" readline abilities in command mode
cnoremap <C-a> <Home>
cnoremap <C-e> <End>
cnoremap <C-f> <Right>
cnoremap <C-b> <Left>
cnoremap <C-p> <Up>
cnoremap <C-n> <Down>
cnoremap <C-d> <Del>

noremap <silent> j gj
noremap <silent> k gk

" Move visual selection
vnoremap <silent> J :m '>+1<CR>gv=gv
vnoremap <silent> K :m '>-2<CR>gv=gv

" change the current working directory to the current file's location
nnoremap <silent> <leader>cd :cd %:p:h<CR>:pwd<CR>

" set up extra whitespace detection and stripping
nnoremap <silent> <leader>sw :StripWhitespace<CR>

" grep the word under the cursor.
nnoremap <silent> <leader>* :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>

" fast mapping to the last buffer command
nnoremap <silent> <leader>. <C-^>

" generate ctags
function! GenerateCtags()
  let l:git_directory = fugitive#extract_git_dir(getcwd())
  if isdirectory(l:git_directory)
    let l:cmd = 'ctags --tag-relative --recurse --exclude=.git -f ' . l:git_directory . '/tags .'
    let l:results = system(l:cmd)
  endif
endfunction

" map the GenerateCtags function
nnoremap <silent> <leader>T :call GenerateCtags()<CR>

" mappings for TagBar
nnoremap <silent> <leader>t :TagbarToggle<CR>

" open this file's directory using netrw in a split.
nnoremap <silent> <C-n> :vsplit<CR><C-W><C-W>:edit %:p:h<CR>

" Incremental search settings
let g:incsearch#auto_nohlsearch = 1
let g:incsearch#consistent_n_direction = 1
let g:incsearch#magic = '\v'

" Incremental search mappings
map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)
map n  <Plug>(incsearch-nohl-n)zz
map N  <Plug>(incsearch-nohl-N)zz
map *  <Plug>(incsearch-nohl-*)
map #  <Plug>(incsearch-nohl-#)
map g* <Plug>(incsearch-nohl-g*)
map g# <Plug>(incsearch-nohl-g#)

" CtrlP shortcuts and settings
nnoremap <silent> <leader>p :CtrlP<CR>
nnoremap <silent> <leader>P :CtrlPTag<CR>
nnoremap <silent> <leader>b :CtrlPBuffer<CR>

" use ag instead of grep
set grepprg=ag\ --nogroup\ --nocolor

" use ag for CtrlP
let g:ctrlp_user_command='ag %s -l --nocolor -g ""'
let g:ctrlp_use_caching=0
let g:ctrlp_custom_ignore = 'tags'

" settings
nnoremap <leader>a :Ag!<space>
let g:ag_highlight=1

" clear highlighting and redraw the screen
nnoremap <silent> <leader>l :redraw!<CR>:nohl<CR><ESC>

" quickly edit/reload the vimrc file or plugs file
nnoremap <silent> <leader>ev  :e $MYVIMRC<CR>
nnoremap <silent> <leader>ep  :e ~/.vim/etc/plugs.vim<CR>
nnoremap <silent> <leader>esv :vsplit<CR><C-w><C-w>:e $MYVIMRC<CR>
nnoremap <silent> <leader>esp :vsplit<CR><C-w><C-w>:e ~/.vim/etc/plugs.vim<CR>
nnoremap <silent> <leader>sv  :so $MYVIMRC<CR>:nohl<CR>

" fugitive shortcuts
nnoremap <silent> <leader>gl :Glog<CR>
nnoremap <silent> <leader>gd :Gdiff<CR>
nnoremap <silent> <leader>gb :Gblame<CR>
nnoremap <silent> <leader>gs :Gstatus<CR>
nnoremap <silent> <leader>gc :Gcommit -v<CR>
nnoremap <silent> <leader>gr :Gread<CR>

" quickly write
nnoremap <silent> <leader>w :write<CR>
nnoremap <silent> <leader>W :SudoWrite<CR>

" shortcuts for moving around split windows
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" shortcuts for opening new split windows
nnoremap <silent> <leader>h :split<CR><C-w><C-w>
nnoremap <silent> <leader>v :vsplit<CR><C-w><C-w>
nnoremap <silent> <leader>q :q<CR>
nnoremap <silent> <leader>Q :q!<CR>

" F8 to toggle line numbers and git-gutter
nnoremap <silent> <F8> :set nonumber!<CR>norelativenumber!<CR>:GitGutterToggle<CR>

" F9 to Toggle list (display unprintable characters)
nnoremap <silent> <F9> :set list!<CR>

" Toggle highlighting of current line and column.
nnoremap <silent> <F10> :set cursorline!<CR>

" Toggle line numbers and GitGutter for copy/pasting
nnoremap <silent> <F8> :set nonumber!<CR>:set relativenumber!<CR>:GitGutterToggle<CR>

" GitGutter Settings
let g:gitgutter_map_keys = 0

" if tmux or screen is being used, default to 256 colors
if &term == "screen"
  set t_Co=256
end

" airline symbol compatibility
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif

let g:airline_left_sep = ''
let g:airline_right_sep = ''
let g:airline_symbols.linenr = ''
let g:airline_symbols.maxlinenr = ''
let g:airline_symbols.paste = 'PASTE'
let g:airline_symbols.notexists = ''
let g:airline_symbols.readonly = ''

" load a personal vimrc if one exists
let s:personalrc = expand($HOME . '/.personal.vimrc')
if filereadable(s:personalrc)
  exec ':so ' . s:personalrc
endif
